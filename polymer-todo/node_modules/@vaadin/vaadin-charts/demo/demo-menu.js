import { PolymerElement } from '@polymer/polymer/polymer-element.js';
import 'app-menu/app-menu.js';
import 'app-menu/app-submenu.js';
import '@polymer/iron-icons/iron-icons.js';
import '@polymer/iron-icon/iron-icon.js';
import { html } from '@polymer/polymer/lib/utils/html-tag.js';
import { beforeNextRender } from '@polymer/polymer/lib/utils/render-status.js';
class DemoMenu extends PolymerElement {
  static get template() {
    return html`
    <style>
       :host {
        display: block;
        --app-menu-color: #616161;
        --water: #00B4F0;
        --charcoal: #33383A;
        --app-primary-color: var(--water);
        --app-secondary-color: #e5e8e8;
        --app-menu-selected-bg-color: rgba(0, 0, 0, 0.05);
        --primary-color: #e5e8e8;
        --app-menu-background-color: var(--charcoal);
        --app-menu-color: #e5e8e8;
        --app-menu-focused-item: {
          background-color: var(--water);
          color: #e5e8e8;
        }
      }

      .app-menu-item {
        font-weight: bold;
        min-height: 40px;
      }

      .app-menu-item:focus {
        background-color: var(--charcoal);
      }

      .app-menu-item:hover,
      .app-menu-item[aria-selected] {
        background-color: var(--water) !important; /* for some reason, the order in Firefox is different, so this is overwritten withou !important */
      }

      .submenu .app-menu-item {
        padding-left: 34px;
      }
    </style>

    <app-menu>
      <template is="dom-repeat" id="categories" items="[[categories]]" as="category">
        <template is="dom-if" if="{{_isSubMenu(category)}}">
          <app-submenu id="[[category.name]]">
            <div class="app-menu-item" slot="submenu-trigger">
              <a name="[[category.name]]">[[category.caption]]</a>
              <iron-icon icon="expand-more" class="expand-icon"></iron-icon>
            </div>
            <app-menu slot="submenu-content" class="submenu">
              <template is="dom-repeat" items="[[category.demos]]" as="demo">
                <a category="[[category.name]]" id="[[demo.component]]" name="[[demo.component]]" href="#/[[category.name]]/[[demo.component]]" class="app-menu-item">[[demo.caption]]</a>
              </template>
            </app-menu>
          </app-submenu>
        </template>
        <template is="dom-if" if="{{!_isSubMenu(category)}}">
          <a id="[[category.component]]" name="[[category.component]]" href="#/[[category.component]]" class="app-menu-item">[[category.caption]]</a>
        </template>
      </template>
    </app-menu>
`;
  }

  static get is() {
    return 'demo-menu';
  }

  static get properties() {
    return {
      categories: {
        type: Array,
      },

      category: String,
      page: String,
      oldPage: String
    };
  }

  updateSelection() {
    beforeNextRender(this, () => {
      if (this.category !== '' && this.page !== '') {
        const category = this.shadowRoot.querySelector(`[id='${this.category}']`);
        if (category && this.page !== this.oldPage) {
          const menuItem = category.querySelector(`#${this.page}`);
          menuItem && menuItem.click();
          this.oldPage = this.page;
        }
      }
    });
  }

  _isSubMenu(category) {
    return typeof category.demos !== 'undefined';
  }
}

window.customElements.define(DemoMenu.is, DemoMenu);
